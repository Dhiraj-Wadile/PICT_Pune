1) Display all the ANALYSTs whose name doesn’t ends with ‘S’ 
2) Display all the employees who are earning more than all the managers.
3) Display all the managers working in 20 & 30 department.
4) Display all the managers who don’t have a manager
5) Display the second maximum salary.
6) Display the departments that are having more than 3 employees under it.
7) Display job-wise average salaries for the employees whose employee 
number is not from 7788 to 7790.
8) Display department-wise total salaries for all the Managers and Analysts, 
only if the average salaries for the same is greater than or equal to 3000.
9) Display the third maximum salary.
10)Display all the managers & clerk who work in Accounting and Marketing 
(SALES) departments.
11)Display all the managers & clerks who work in Accounts and Marketing 
departments.
12)Display all the employees who have joined before their managers.
13) Select all the employees name along with their manager names, and if an 
employee does not have a manager, display him as “CEO”.
14) Write a trigger to delete department, dependent table must be reflected 
accordingly.
15)Write a procedure to Display job-wise maximum salary.

Queries:-

--CREATION 
CREATE TABLE DEPT(DEPTNO int , DNAME varchar(100) , LOC varchar(100) ,primary key(DEPTNO));
CREATE TABLE EMP(EMPNO INT , ENAME varchar(100) , JOB varchar(50) , MGR INT , HIREDATE date , SAL INT , COMM INT , DEPTNO INT , FOREIGN KEY (DEPTNO) references DEPT(DEPTNO) , PRIMARY KEY (EMPNO))

--INSERTION


INSERT INTO DEPT (DEPTNO, DNAME, LOC)
VALUES
(10, 'ACCOUNTING', 'NEW YORK'),
(20, 'RESEARCH', 'DALLAS'),
(30, 'SALES', 'CHICAGO'),
(40, 'OPERATIONS', 'BOSTON');


INSERT INTO EMP (EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO)
VALUES
(7369, 'SMITH', 'CLERK', 7902, '1980-12-17', 800, NULL, 20),
(7499, 'ALLEN', 'SALESMAN', 7698, '1981-02-20', 1600, 300, 30),
(7521, 'WARD', 'SALESMAN', 7698, '1981-02-22', 1250, 500, 30),
(7566, 'JONES', 'MANAGER', 7839, '1981-04-02', 2975, NULL, 20),
(7654, 'MARTIN', 'SALESMAN', 7698, '1981-09-28', 1250, 1400, 30),
(7698, 'BLAKE', 'MANAGER', 7839, '1981-05-01', 2850, NULL, 30),
(7782, 'CLARK', 'MANAGER', 7839, '1981-06-09', 2450, NULL, 10),
(7788, 'SCOTT', 'ANALYST', 7566, '1982-12-09', 3000, NULL, 20),
(7839, 'KING', 'PRESIDENT', NULL, '1981-11-17', 5000, NULL, 10),
(7844, 'TURNER', 'SALESMAN', 7698, '1981-09-08', 1500, 0, 30),
(7876, 'ADAMS', 'CLERK', 7788, '1983-01-12', 1100, NULL, 20),
(7900, 'JAMES', 'CLERK', 7698, '1981-12-03', 950, NULL, 30),
(7902, 'FORD', 'ANALYST', 7566, '1981-12-03', 3000, NULL, 20),
(7934, 'MILLER', 'CLERK', 7782, '1982-01-23', 1300, NULL, 10);

//QUERIES

1)
select * from emp where job = "ANALYST" and ename NOT LIKE("%s")

2)
select * from emp where sal > (select max(sal) from emp where job = "MANAGER");

3)
SELECT *
FROM EMP
WHERE JOB = 'MANAGER' AND DEPTNO IN (20, 30);

4) //NOT CLEAR MENTION
SELECT *
FROM EMP
WHERE JOB = 'MANAGER' AND EMPNO NOT IN (SELECT MGR FROM EMP);

5)
select * from emp ORDER BY (sal) desc LIMIT 1,2;
select DISTINCT sal from emp ORDER BY (sal) desc LIMIT 1,1;


6)
SELECT DEPTNO, COUNT(*) AS NumEmployees
FROM EMP
GROUP BY DEPTNO
HAVING COUNT(*) > 3;

select DEPTNO  FROM EMP GROUP BY DEPTNO HAVING COUNT(empno) > 3;


7)
SELECT JOB, AVG(SAL)
FROM EMP
WHERE EMPNO NOT BETWEEN 7788 AND 7790
GROUP BY JOB;

SELECT JOB, AVG(SAL)
FROM EMP
WHERE EMPNO NOT IN (7788 , 7790)
GROUP BY JOB;


8)
SELECT DEPTNO, SUM(SAL)
FROM EMP
WHERE JOB IN ('MANAGER', 'ANALYST')
GROUP BY DEPTNO
HAVING AVG(SAL) >= 3000;

9)
select DISTINCT sal from emp ORDER BY (sal) desc LIMIT 2,1;

10,11)
SELECT *
FROM EMP
WHERE JOB IN ('MANAGER', 'CLERK') AND DEPTNO IN (10, 30);

12)
SELECT e.*
FROM EMP e
WHERE e.HIREDATE < (
  SELECT m.HIREDATE
  FROM EMP m
  WHERE e.MGR = m.EMPNO
);

//or

SELECT *
FROM EMP
WHERE HIREDATE < (
  SELECT m.HIREDATE
  FROM EMP m
  WHERE EMP.MGR = m.EMPNO
);

13) select e1.ename,coalesce(e2.ename,"CEO") from emp e1 left join emp e2 on e1.mgr=e2.empno;//


14)   CREATE TRIGGER delete_department_trigger
BEFORE DELETE ON DEPT
FOR EACH ROW
BEGIN
  DELETE FROM EMP WHERE DEPTNO = OLD.DEPTNO;
END;

15)
CREATE PROCEDURE display_job_wise_max_salary()
BEGIN
  SELECT JOB, MAX(SAL)
  FROM EMP
  GROUP BY JOB
/
