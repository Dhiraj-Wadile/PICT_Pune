#include <iostream>
#include <GL/glut.h>
#include <GL/freeglut.h>
#include <cmath>

#define RADIAN (M_PI / 180)
#define XMAX 1400
#define YMAX 900

bool fillEnabled = false; // Flag to indicate if filling is enabled

void Initialize();
void draw();
void draw_koch(float, float, float, float, int);
void fill_koch(float, float, float, float, float, float);
void keyboard(unsigned char, int, int);

void Initialize()
{
    glClear(GL_COLOR_BUFFER_BIT);
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glColor3f(1.0, 0.0, 0.0);
    gluOrtho2D(0.0, XMAX, 0.0, YMAX);
}

void draw(int n)
{
    glBegin(GL_LINES);
    draw_koch(600, 100, 800, 400, n);
    draw_koch(800, 400, 400, 400, n);
    draw_koch(400, 400, 600, 100, n);
    glEnd();

    if (fillEnabled)
    {
        fill_koch(600, 100, 800, 400, 1.0, 0.0); // Fill the Koch curve triangle with color
        fill_koch(800, 400, 400, 400, 0.0, 1.0); // Fill the Koch curve triangle with color
        fill_koch(400, 400, 600, 100, 1.0, 1.0); // Fill the Koch curve triangle with color
    }

    glFlush();
}

void draw_koch(float xa, float ya, float xb, float yb, int n)
{
    float xc, xd, yc, yd, midx, midy;
    xc = (2 * xa + xb) / 3;
    yc = (2 * ya + yb) / 3;
    xd = (xa + 2 * xb) / 3;
    yd = (ya + 2 * yb) / 3;
    midx = xc + ((xd - xc) * cos(60 * RADIAN)) + ((yd - yc) * sin(60 * RADIAN));
    midy = yc - ((xd - xc) * sin(60 * RADIAN)) + ((yd - yc) * cos(60 * RADIAN));

    if (n > 0)
    {
        draw_koch(xa, ya, xc, yc, n - 1);
        draw_koch(xc, yc, midx, midy, n - 1);
        draw_koch(midx, midy, xd, yd, n - 1);
        draw_koch(xd, yd, xb, yb, n - 1);
    }
    else
    {
        glVertex2f(xa, ya);
        glVertex2f(xc, yc);

        glVertex2f(xc, yc);
        glVertex2f(midx, midy);

        glVertex2f(midx, midy);
        glVertex2f(xd, yd);

        glVertex2f(xd, yd);
        glVertex2f(xb, yb);
    }
}

void fill_koch(float xa, float ya, float xb, float yb, float r, float g)
{
    glColor3f(0.0, g, 0.0); // Set fill color
    glBegin(GL_TRIANGLES);
    glVertex2f(xa, ya);
    glVertex2f(xb, yb);
    glVertex2f((xa + xb) / 2, (ya + yb) / 2);
    glEnd();
}

void keyboard(unsigned char key, int x, int y)
{
    if (key == 'f' || key == 'F')
    {
        fillEnabled = !fillEnabled; // Toggle fill state
        glutPostRedisplay();        // Trigger redisplay
    }
}

int main(int argc, char **argv)
{
    int n;
    std::cout << "Enter the number of iterations: ";
    std::cin >> n;

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(XMAX, YMAX);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("Koch Curve");

    Initialize();
    draw(n);

    glutKeyboardFunc(keyboard); // Register keyboard callback function

    glutMainLoop();

    return 0;
}
