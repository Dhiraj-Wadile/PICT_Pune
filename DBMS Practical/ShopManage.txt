Q.7 Shops sell items at varying prices. Customers buy items from shops. This is 
described by the following relations:
Shops (ShopId, name, address)
Items (ItemId, name, description)
Sells (ShopId, ItemId, price)
Customers (CustomerId, name, address)
Sales (SaleId, CustomerId, ItemId, ShopId, date)
a) Draw an E/R diagram that describes the database.
b) Create the table Sells. Invent suitable types for the attributes (itemId shall have 
the type char(10)) and indicate reasonable integrity constraints.
c) Print the name and address of all customers who haven’t bought any item.
d) Print the number of shops that sell items with id’s starting with 'EF'.
e) Print the name and address of the shop(s) that sell the item with id = 'EF123-
A' at the lowest price.
f) For all customers that have bought at least one item: print the customer id and 
the total sum of all purchases.
g) Display total price per customer.
h) Display the name of Highest buyer.
i) Write a procedure to display total items per customer.
j) Write a trigger to delete item, corresponding tables must have reflected
according

Queries:-

//CREATION 
CREATE TABLE Shops (
  ShopId INT PRIMARY KEY,
  name VARCHAR(255),
  address VARCHAR(255)
);

CREATE TABLE Items (
  ItemId INT PRIMARY KEY,
  name VARCHAR(255),
  description VARCHAR(255)
);

CREATE TABLE Sells (
  ShopId INT,
  ItemId INT,
  price DECIMAL(10, 2),
  FOREIGN KEY (ShopId) REFERENCES Shops(ShopId),
  FOREIGN KEY (ItemId) REFERENCES Items(ItemId)
);

CREATE TABLE Customers (
  CustomerId INT PRIMARY KEY,
  name VARCHAR(255),
  address VARCHAR(255)
);

CREATE TABLE Sales (
  SaleId INT PRIMARY KEY,
  CustomerId INT,
  ItemId INT,
  ShopId INT,
  date DATE,
  FOREIGN KEY (CustomerId) REFERENCES Customers(CustomerId) ON DELETE CASCADE,
  FOREIGN KEY (ItemId) REFERENCES Items(ItemId) ON DELETE CASCADE,
  FOREIGN KEY (ShopId) REFERENCES Shops(ShopId) ON DELETE CASCADE
);

//INSERTION

INSERT INTO Shops (ShopId, name, address)
VALUES (1, 'Supermart', '123 Main Street'),
       (2, 'Corner Store', '456 Elm Avenue'),
       (3, 'Mega Mart', '789 Oak Road'),
       (4, 'Discount Mart', '10 Pine Lane'),
       (5, 'Neighborhood Market', '111 Maple Drive'),
       (6, 'Convenience Store', '222 Cedar Street');


INSERT INTO Items (ItemId, name, description)
VALUES (101, 'Milk', 'Fresh cow milk'),
       (102, 'Bread', 'Whole wheat bread'),
       (103, 'Apples', 'Red apples'),
       (104, 'Chicken', 'Boneless chicken breast'),
       (105, 'Cereal', 'Whole grain cereal'),
       (106, 'Eggs', 'Large eggs');


INSERT INTO Sells (ShopId, ItemId, price)
VALUES (1, 101, 2.99),
       (3, 102, 1.99),
       (6, 103, 0.99),
       (5, 104, 5.99),
       (2, 105, 3.49),
       (4, 106, 2.49);


INSERT INTO Customers (CustomerId, name, address)
VALUES (14, 'John Smith', '123 Oak Street'),
       (11, 'Mary Johnson', '456 Elm Avenue'),
       (16, 'Michael Davis', '789 Pine Road'),
       (15, 'Jennifer Wilson', '10 Maple Drive'),
       (13, 'David Thompson', '111 Cedar Lane'),
       (12, 'Jessica Martinez', '222 Walnut Street');


INSERT INTO Sales (SaleId, CustomerId, ItemId, ShopId, date)
VALUES (1002, 11, 101, 1, '2023-05-01'),
       (1001, 13, 102, 2, '2023-05-02'),
       (1005, 14, 103, 3, '2023-05-03'),
       (1004, 12, 104, 4, '2023-05-04'),
       (1003, 15, 105, 5, '2023-05-05'),
       (1006, 16, 106, 6, '2023-05-06');

//QUERIES

c)
SELECT name, address
FROM Customers
WHERE CustomerId NOT IN (SELECT DISTINCT CustomerId FROM Sales);

d)
select count(shops.ShopId) from shops,items,sells where shops.ShopId=sells.ShopId and sells.itemId=items.itemId and shops.name LIKE ("C%");

SELECT COUNT(DISTINCT ShopId)
FROM Sells
WHERE ItemId = 105;

e)
select name , address from shops Natural join sells  where sells.itemid = 103 and price = (select min(price) from sells where sells.itemid = 103);

f)
select CustomerId , sum(price) from sales , sells where sales.itemid = sells.itemid GROUP BY(customerid) HAVING count(sales.itemid)>=1;

g)
select CustomerId , sum(price) from sales , sells where sales.itemid = sells.itemid GROUP BY(customerid);


h)
select customers.customerId , name from sales , sells , customers where sales.itemid = sells.itemid and customers.customerId = sales.customerId GROUP BY(customerid) ORDER BY sum(price) desc limit 1;
select customers.customerId , name from customers natural join sales natural join sells where price = (select max(price) from sells);

i)
// procedure format same as above
select CustomerId ,count(ItemId) from sales group by(CustomerId);

j)
//NOT 100 % sure
CREATE TRIGGER delete_item_trigger
BEFORE DELETE ON Items
FOR EACH ROW
BEGIN
  DELETE FROM Sales WHERE ItemId = OLD.ItemId;
  DELETE FROM sells WHERE ItemId = OLD.ItemId;  
END;

--- add below lines of code while performing the above trigger 
---after foreign key constraint error---
ALTER TABLE sells
DROP FOREIGN KEY sells_ibfk_2;

ALTER TABLE sells
ADD CONSTRAINT sells_ibfk_2 FOREIGN KEY (ItemId) REFERENCES items (ItemId) ON DELETE CASCADE;


		CREATE TRIGGER yzz
AFTER UPDATE ON Items
FOR EACH ROW
BEGIN
UPDATE Shops Set name="YZ";
END;
 //

UPDATE items set name="hoi" where itemId=101;
    -> //

